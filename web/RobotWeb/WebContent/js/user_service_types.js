//
// Autogenerated by Thrift Compiler (0.9.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//

Command = {
'STOP' : 1,
'MOVE_FORWARD' : 2,
'MOVE_BACKWARD' : 3,
'TURN_LEFT' : 4,
'TURN_RIGHT' : 5,
'TILT_UP' : 6,
'TILT_DOWN' : 7
};
CommandStatus = {
'OK' : 1,
'OFFLINE' : 2,
'ERROR' : 3
};
CommandRequest = function(args) {
  this.from = null;
  this.to = null;
  this.command = null;
  if (args) {
    if (args.from !== undefined) {
      this.from = args.from;
    }
    if (args.to !== undefined) {
      this.to = args.to;
    }
    if (args.command !== undefined) {
      this.command = args.command;
    }
  }
};
CommandRequest.prototype = {};
CommandRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.from = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRING) {
        this.to = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.I32) {
        this.command = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CommandRequest.prototype.write = function(output) {
  output.writeStructBegin('CommandRequest');
  if (this.from !== null && this.from !== undefined) {
    output.writeFieldBegin('from', Thrift.Type.STRING, 1);
    output.writeString(this.from);
    output.writeFieldEnd();
  }
  if (this.to !== null && this.to !== undefined) {
    output.writeFieldBegin('to', Thrift.Type.STRING, 2);
    output.writeString(this.to);
    output.writeFieldEnd();
  }
  if (this.command !== null && this.command !== undefined) {
    output.writeFieldBegin('command', Thrift.Type.I32, 3);
    output.writeI32(this.command);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

CommandResponse = function(args) {
  this.status = null;
  if (args) {
    if (args.status !== undefined) {
      this.status = args.status;
    }
  }
};
CommandResponse.prototype = {};
CommandResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.I32) {
        this.status = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CommandResponse.prototype.write = function(output) {
  output.writeStructBegin('CommandResponse');
  if (this.status !== null && this.status !== undefined) {
    output.writeFieldBegin('status', Thrift.Type.I32, 1);
    output.writeI32(this.status);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

