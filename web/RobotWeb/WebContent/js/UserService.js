//
// Autogenerated by Thrift Compiler (0.9.0)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//


//HELPER FUNCTIONS AND STRUCTURES

UserService_Login_args = function(args) {
  this.request = null;
  if (args) {
    if (args.request !== undefined) {
      this.request = args.request;
    }
  }
};
UserService_Login_args.prototype = {};
UserService_Login_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.request = new UserLoginRequest();
        this.request.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserService_Login_args.prototype.write = function(output) {
  output.writeStructBegin('UserService_Login_args');
  if (this.request !== null && this.request !== undefined) {
    output.writeFieldBegin('request', Thrift.Type.STRUCT, 1);
    this.request.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserService_Login_result = function(args) {
  this.success = null;
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
  }
};
UserService_Login_result.prototype = {};
UserService_Login_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.BOOL) {
        this.success = input.readBool().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserService_Login_result.prototype.write = function(output) {
  output.writeStructBegin('UserService_Login_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.BOOL, 0);
    output.writeBool(this.success);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserService_Logout_args = function(args) {
};
UserService_Logout_args.prototype = {};
UserService_Logout_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserService_Logout_args.prototype.write = function(output) {
  output.writeStructBegin('UserService_Logout_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserService_Logout_result = function(args) {
};
UserService_Logout_result.prototype = {};
UserService_Logout_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserService_Logout_result.prototype.write = function(output) {
  output.writeStructBegin('UserService_Logout_result');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserService_GetRobotStatus_args = function(args) {
  this.robot_id = null;
  if (args) {
    if (args.robot_id !== undefined) {
      this.robot_id = args.robot_id;
    }
  }
};
UserService_GetRobotStatus_args.prototype = {};
UserService_GetRobotStatus_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.robot_id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserService_GetRobotStatus_args.prototype.write = function(output) {
  output.writeStructBegin('UserService_GetRobotStatus_args');
  if (this.robot_id !== null && this.robot_id !== undefined) {
    output.writeFieldBegin('robot_id', Thrift.Type.STRING, 1);
    output.writeString(this.robot_id);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserService_GetRobotStatus_result = function(args) {
  this.success = null;
  this.access_denied = null;
  if (args instanceof AccessDeniedException) {
    this.access_denied = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.access_denied !== undefined) {
      this.access_denied = args.access_denied;
    }
  }
};
UserService_GetRobotStatus_result.prototype = {};
UserService_GetRobotStatus_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.access_denied = new AccessDeniedException();
        this.access_denied.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserService_GetRobotStatus_result.prototype.write = function(output) {
  output.writeStructBegin('UserService_GetRobotStatus_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.access_denied !== null && this.access_denied !== undefined) {
    output.writeFieldBegin('access_denied', Thrift.Type.STRUCT, 1);
    this.access_denied.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserService_SetRobotStatus_args = function(args) {
  this.robot_id = null;
  this.new_status = null;
  if (args) {
    if (args.robot_id !== undefined) {
      this.robot_id = args.robot_id;
    }
    if (args.new_status !== undefined) {
      this.new_status = args.new_status;
    }
  }
};
UserService_SetRobotStatus_args.prototype = {};
UserService_SetRobotStatus_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.robot_id = input.readString().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.I32) {
        this.new_status = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserService_SetRobotStatus_args.prototype.write = function(output) {
  output.writeStructBegin('UserService_SetRobotStatus_args');
  if (this.robot_id !== null && this.robot_id !== undefined) {
    output.writeFieldBegin('robot_id', Thrift.Type.STRING, 1);
    output.writeString(this.robot_id);
    output.writeFieldEnd();
  }
  if (this.new_status !== null && this.new_status !== undefined) {
    output.writeFieldBegin('new_status', Thrift.Type.I32, 2);
    output.writeI32(this.new_status);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserService_SetRobotStatus_result = function(args) {
  this.success = null;
  this.access_denied = null;
  if (args instanceof AccessDeniedException) {
    this.access_denied = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.access_denied !== undefined) {
      this.access_denied = args.access_denied;
    }
  }
};
UserService_SetRobotStatus_result.prototype = {};
UserService_SetRobotStatus_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.I32) {
        this.success = input.readI32().value;
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.access_denied = new AccessDeniedException();
        this.access_denied.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserService_SetRobotStatus_result.prototype.write = function(output) {
  output.writeStructBegin('UserService_SetRobotStatus_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.I32, 0);
    output.writeI32(this.success);
    output.writeFieldEnd();
  }
  if (this.access_denied !== null && this.access_denied !== undefined) {
    output.writeFieldBegin('access_denied', Thrift.Type.STRUCT, 1);
    this.access_denied.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserService_ListRobots_args = function(args) {
};
UserService_ListRobots_args.prototype = {};
UserService_ListRobots_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    input.skip(ftype);
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserService_ListRobots_args.prototype.write = function(output) {
  output.writeStructBegin('UserService_ListRobots_args');
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserService_ListRobots_result = function(args) {
  this.success = null;
  this.access_denied = null;
  if (args instanceof AccessDeniedException) {
    this.access_denied = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.access_denied !== undefined) {
      this.access_denied = args.access_denied;
    }
  }
};
UserService_ListRobots_result.prototype = {};
UserService_ListRobots_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new UserRobots();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.access_denied = new AccessDeniedException();
        this.access_denied.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserService_ListRobots_result.prototype.write = function(output) {
  output.writeStructBegin('UserService_ListRobots_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.access_denied !== null && this.access_denied !== undefined) {
    output.writeFieldBegin('access_denied', Thrift.Type.STRUCT, 1);
    this.access_denied.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserService_SendCommand_args = function(args) {
  this.request = null;
  if (args) {
    if (args.request !== undefined) {
      this.request = args.request;
    }
  }
};
UserService_SendCommand_args.prototype = {};
UserService_SendCommand_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.request = new CommandRequest();
        this.request.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserService_SendCommand_args.prototype.write = function(output) {
  output.writeStructBegin('UserService_SendCommand_args');
  if (this.request !== null && this.request !== undefined) {
    output.writeFieldBegin('request', Thrift.Type.STRUCT, 1);
    this.request.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserService_SendCommand_result = function(args) {
  this.success = null;
  this.access_denied = null;
  if (args instanceof AccessDeniedException) {
    this.access_denied = args;
    return;
  }
  if (args) {
    if (args.success !== undefined) {
      this.success = args.success;
    }
    if (args.access_denied !== undefined) {
      this.access_denied = args.access_denied;
    }
  }
};
UserService_SendCommand_result.prototype = {};
UserService_SendCommand_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new CommandResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.access_denied = new AccessDeniedException();
        this.access_denied.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

UserService_SendCommand_result.prototype.write = function(output) {
  output.writeStructBegin('UserService_SendCommand_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.access_denied !== null && this.access_denied !== undefined) {
    output.writeFieldBegin('access_denied', Thrift.Type.STRUCT, 1);
    this.access_denied.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

UserServiceClient = function(input, output) {
    this.input = input;
    this.output = (!output) ? input : output;
    this.seqid = 0;
};
UserServiceClient.prototype = {};
UserServiceClient.prototype.Login = function(request) {
  this.send_Login(request);
  return this.recv_Login();
};

UserServiceClient.prototype.send_Login = function(request) {
  this.output.writeMessageBegin('Login', Thrift.MessageType.CALL, this.seqid);
  var args = new UserService_Login_args();
  args.request = request;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

UserServiceClient.prototype.recv_Login = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new UserService_Login_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.success) {
    return result.success;
  }
  throw 'Login failed: unknown result';
};
UserServiceClient.prototype.Logout = function() {
  this.send_Logout();
  this.recv_Logout();
};

UserServiceClient.prototype.send_Logout = function() {
  this.output.writeMessageBegin('Logout', Thrift.MessageType.CALL, this.seqid);
  var args = new UserService_Logout_args();
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

UserServiceClient.prototype.recv_Logout = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new UserService_Logout_result();
  result.read(this.input);
  this.input.readMessageEnd();

  return;
};
UserServiceClient.prototype.GetRobotStatus = function(robot_id) {
  this.send_GetRobotStatus(robot_id);
  return this.recv_GetRobotStatus();
};

UserServiceClient.prototype.send_GetRobotStatus = function(robot_id) {
  this.output.writeMessageBegin('GetRobotStatus', Thrift.MessageType.CALL, this.seqid);
  var args = new UserService_GetRobotStatus_args();
  args.robot_id = robot_id;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

UserServiceClient.prototype.recv_GetRobotStatus = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new UserService_GetRobotStatus_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.access_denied) {
    throw result.access_denied;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'GetRobotStatus failed: unknown result';
};
UserServiceClient.prototype.SetRobotStatus = function(robot_id, new_status) {
  this.send_SetRobotStatus(robot_id, new_status);
  return this.recv_SetRobotStatus();
};

UserServiceClient.prototype.send_SetRobotStatus = function(robot_id, new_status) {
  this.output.writeMessageBegin('SetRobotStatus', Thrift.MessageType.CALL, this.seqid);
  var args = new UserService_SetRobotStatus_args();
  args.robot_id = robot_id;
  args.new_status = new_status;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

UserServiceClient.prototype.recv_SetRobotStatus = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new UserService_SetRobotStatus_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.access_denied) {
    throw result.access_denied;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'SetRobotStatus failed: unknown result';
};
UserServiceClient.prototype.ListRobots = function() {
  this.send_ListRobots();
  return this.recv_ListRobots();
};

UserServiceClient.prototype.send_ListRobots = function() {
  this.output.writeMessageBegin('ListRobots', Thrift.MessageType.CALL, this.seqid);
  var args = new UserService_ListRobots_args();
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

UserServiceClient.prototype.recv_ListRobots = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new UserService_ListRobots_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.access_denied) {
    throw result.access_denied;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'ListRobots failed: unknown result';
};
UserServiceClient.prototype.SendCommand = function(request) {
  this.send_SendCommand(request);
  return this.recv_SendCommand();
};

UserServiceClient.prototype.send_SendCommand = function(request) {
  this.output.writeMessageBegin('SendCommand', Thrift.MessageType.CALL, this.seqid);
  var args = new UserService_SendCommand_args();
  args.request = request;
  args.write(this.output);
  this.output.writeMessageEnd();
  return this.output.getTransport().flush();
};

UserServiceClient.prototype.recv_SendCommand = function() {
  var ret = this.input.readMessageBegin();
  var fname = ret.fname;
  var mtype = ret.mtype;
  var rseqid = ret.rseqid;
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(this.input);
    this.input.readMessageEnd();
    throw x;
  }
  var result = new UserService_SendCommand_result();
  result.read(this.input);
  this.input.readMessageEnd();

  if (null !== result.access_denied) {
    throw result.access_denied;
  }
  if (null !== result.success) {
    return result.success;
  }
  throw 'SendCommand failed: unknown result';
};
