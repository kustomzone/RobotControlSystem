/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef user_service_TYPES_H
#define user_service_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>



namespace robot_control_system {

struct Command {
  enum type {
    STOP = 1,
    MOVE_FORWARD = 2,
    MOVE_BACKWARD = 3,
    TURN_LEFT = 4,
    TURN_RIGHT = 5,
    TILT_UP = 6,
    TILT_DOWN = 7
  };
};

extern const std::map<int, const char*> _Command_VALUES_TO_NAMES;

struct CommandStatus {
  enum type {
    OK = 1,
    OFFLINE = 2,
    ERROR = 3
  };
};

extern const std::map<int, const char*> _CommandStatus_VALUES_TO_NAMES;

typedef struct _CommandRequest__isset {
  _CommandRequest__isset() : from(false), to(false), command(false) {}
  bool from;
  bool to;
  bool command;
} _CommandRequest__isset;

class CommandRequest {
 public:

  static const char* ascii_fingerprint; // = "4F8ABE747D9A2DF14F7E84DDBE60D55C";
  static const uint8_t binary_fingerprint[16]; // = {0x4F,0x8A,0xBE,0x74,0x7D,0x9A,0x2D,0xF1,0x4F,0x7E,0x84,0xDD,0xBE,0x60,0xD5,0x5C};

  CommandRequest() : from(), to(), command((Command::type)0) {
  }

  virtual ~CommandRequest() throw() {}

  std::string from;
  std::string to;
  Command::type command;

  _CommandRequest__isset __isset;

  void __set_from(const std::string& val) {
    from = val;
  }

  void __set_to(const std::string& val) {
    to = val;
  }

  void __set_command(const Command::type val) {
    command = val;
  }

  bool operator == (const CommandRequest & rhs) const
  {
    if (!(from == rhs.from))
      return false;
    if (!(to == rhs.to))
      return false;
    if (!(command == rhs.command))
      return false;
    return true;
  }
  bool operator != (const CommandRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommandRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(CommandRequest &a, CommandRequest &b);

typedef struct _CommandResponse__isset {
  _CommandResponse__isset() : status(false) {}
  bool status;
} _CommandResponse__isset;

class CommandResponse {
 public:

  static const char* ascii_fingerprint; // = "8BBB3D0C3B370CB38F2D1340BB79F0AA";
  static const uint8_t binary_fingerprint[16]; // = {0x8B,0xBB,0x3D,0x0C,0x3B,0x37,0x0C,0xB3,0x8F,0x2D,0x13,0x40,0xBB,0x79,0xF0,0xAA};

  CommandResponse() : status((CommandStatus::type)0) {
  }

  virtual ~CommandResponse() throw() {}

  CommandStatus::type status;

  _CommandResponse__isset __isset;

  void __set_status(const CommandStatus::type val) {
    status = val;
  }

  bool operator == (const CommandResponse & rhs) const
  {
    if (!(status == rhs.status))
      return false;
    return true;
  }
  bool operator != (const CommandResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const CommandResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(CommandResponse &a, CommandResponse &b);

} // namespace

#endif
