/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef robot_service_TYPES_H
#define robot_service_TYPES_H

#include <thrift/Thrift.h>
#include <thrift/TApplicationException.h>
#include <thrift/protocol/TProtocol.h>
#include <thrift/transport/TTransport.h>



namespace robot_control_system {

struct RequestStatus {
  enum type {
    OK = 1,
    ERROR = 2
  };
};

extern const std::map<int, const char*> _RequestStatus_VALUES_TO_NAMES;

typedef struct _LoginRequest__isset {
  _LoginRequest__isset() : robot_id(false) {}
  bool robot_id;
} _LoginRequest__isset;

class LoginRequest {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  LoginRequest() : robot_id() {
  }

  virtual ~LoginRequest() throw() {}

  std::string robot_id;

  _LoginRequest__isset __isset;

  void __set_robot_id(const std::string& val) {
    robot_id = val;
  }

  bool operator == (const LoginRequest & rhs) const
  {
    if (!(robot_id == rhs.robot_id))
      return false;
    return true;
  }
  bool operator != (const LoginRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LoginRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(LoginRequest &a, LoginRequest &b);

typedef struct _LogoutRequest__isset {
  _LogoutRequest__isset() : robot_id(false) {}
  bool robot_id;
} _LogoutRequest__isset;

class LogoutRequest {
 public:

  static const char* ascii_fingerprint; // = "EFB929595D312AC8F305D5A794CFEDA1";
  static const uint8_t binary_fingerprint[16]; // = {0xEF,0xB9,0x29,0x59,0x5D,0x31,0x2A,0xC8,0xF3,0x05,0xD5,0xA7,0x94,0xCF,0xED,0xA1};

  LogoutRequest() : robot_id() {
  }

  virtual ~LogoutRequest() throw() {}

  std::string robot_id;

  _LogoutRequest__isset __isset;

  void __set_robot_id(const std::string& val) {
    robot_id = val;
  }

  bool operator == (const LogoutRequest & rhs) const
  {
    if (!(robot_id == rhs.robot_id))
      return false;
    return true;
  }
  bool operator != (const LogoutRequest &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const LogoutRequest & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(LogoutRequest &a, LogoutRequest &b);

typedef struct _RobotServiceResponse__isset {
  _RobotServiceResponse__isset() : status(false) {}
  bool status;
} _RobotServiceResponse__isset;

class RobotServiceResponse {
 public:

  static const char* ascii_fingerprint; // = "8BBB3D0C3B370CB38F2D1340BB79F0AA";
  static const uint8_t binary_fingerprint[16]; // = {0x8B,0xBB,0x3D,0x0C,0x3B,0x37,0x0C,0xB3,0x8F,0x2D,0x13,0x40,0xBB,0x79,0xF0,0xAA};

  RobotServiceResponse() : status((RequestStatus::type)0) {
  }

  virtual ~RobotServiceResponse() throw() {}

  RequestStatus::type status;

  _RobotServiceResponse__isset __isset;

  void __set_status(const RequestStatus::type val) {
    status = val;
  }

  bool operator == (const RobotServiceResponse & rhs) const
  {
    if (!(status == rhs.status))
      return false;
    return true;
  }
  bool operator != (const RobotServiceResponse &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RobotServiceResponse & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

void swap(RobotServiceResponse &a, RobotServiceResponse &b);

} // namespace

#endif
