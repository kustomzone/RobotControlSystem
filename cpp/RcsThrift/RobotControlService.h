/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef RobotControlService_H
#define RobotControlService_H

#include <thrift/TDispatchProcessor.h>
#include "robot_control_service_types.h"

namespace robot_control_system {

class RobotControlServiceIf {
 public:
  virtual ~RobotControlServiceIf() {}
  virtual void GetRobotId(std::string& _return) = 0;
  virtual void ExecuteCommand(const  ::robot_control_system::CommandRequest& request) = 0;
};

class RobotControlServiceIfFactory {
 public:
  typedef RobotControlServiceIf Handler;

  virtual ~RobotControlServiceIfFactory() {}

  virtual RobotControlServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(RobotControlServiceIf* /* handler */) = 0;
};

class RobotControlServiceIfSingletonFactory : virtual public RobotControlServiceIfFactory {
 public:
  RobotControlServiceIfSingletonFactory(const boost::shared_ptr<RobotControlServiceIf>& iface) : iface_(iface) {}
  virtual ~RobotControlServiceIfSingletonFactory() {}

  virtual RobotControlServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(RobotControlServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<RobotControlServiceIf> iface_;
};

class RobotControlServiceNull : virtual public RobotControlServiceIf {
 public:
  virtual ~RobotControlServiceNull() {}
  void GetRobotId(std::string& /* _return */) {
    return;
  }
  void ExecuteCommand(const  ::robot_control_system::CommandRequest& /* request */) {
    return;
  }
};


class RobotControlService_GetRobotId_args {
 public:

  RobotControlService_GetRobotId_args() {
  }

  virtual ~RobotControlService_GetRobotId_args() throw() {}


  bool operator == (const RobotControlService_GetRobotId_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const RobotControlService_GetRobotId_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RobotControlService_GetRobotId_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RobotControlService_GetRobotId_pargs {
 public:


  virtual ~RobotControlService_GetRobotId_pargs() throw() {}


  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RobotControlService_GetRobotId_result__isset {
  _RobotControlService_GetRobotId_result__isset() : success(false) {}
  bool success;
} _RobotControlService_GetRobotId_result__isset;

class RobotControlService_GetRobotId_result {
 public:

  RobotControlService_GetRobotId_result() : success() {
  }

  virtual ~RobotControlService_GetRobotId_result() throw() {}

  std::string success;

  _RobotControlService_GetRobotId_result__isset __isset;

  void __set_success(const std::string& val) {
    success = val;
  }

  bool operator == (const RobotControlService_GetRobotId_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RobotControlService_GetRobotId_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RobotControlService_GetRobotId_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RobotControlService_GetRobotId_presult__isset {
  _RobotControlService_GetRobotId_presult__isset() : success(false) {}
  bool success;
} _RobotControlService_GetRobotId_presult__isset;

class RobotControlService_GetRobotId_presult {
 public:


  virtual ~RobotControlService_GetRobotId_presult() throw() {}

  std::string* success;

  _RobotControlService_GetRobotId_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RobotControlService_ExecuteCommand_args__isset {
  _RobotControlService_ExecuteCommand_args__isset() : request(false) {}
  bool request;
} _RobotControlService_ExecuteCommand_args__isset;

class RobotControlService_ExecuteCommand_args {
 public:

  RobotControlService_ExecuteCommand_args() {
  }

  virtual ~RobotControlService_ExecuteCommand_args() throw() {}

   ::robot_control_system::CommandRequest request;

  _RobotControlService_ExecuteCommand_args__isset __isset;

  void __set_request(const  ::robot_control_system::CommandRequest& val) {
    request = val;
  }

  bool operator == (const RobotControlService_ExecuteCommand_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const RobotControlService_ExecuteCommand_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RobotControlService_ExecuteCommand_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RobotControlService_ExecuteCommand_pargs {
 public:


  virtual ~RobotControlService_ExecuteCommand_pargs() throw() {}

  const  ::robot_control_system::CommandRequest* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RobotControlService_ExecuteCommand_result {
 public:

  RobotControlService_ExecuteCommand_result() {
  }

  virtual ~RobotControlService_ExecuteCommand_result() throw() {}


  bool operator == (const RobotControlService_ExecuteCommand_result & /* rhs */) const
  {
    return true;
  }
  bool operator != (const RobotControlService_ExecuteCommand_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RobotControlService_ExecuteCommand_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RobotControlService_ExecuteCommand_presult {
 public:


  virtual ~RobotControlService_ExecuteCommand_presult() throw() {}


  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class RobotControlServiceClient : virtual public RobotControlServiceIf {
 public:
  RobotControlServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  RobotControlServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void GetRobotId(std::string& _return);
  void send_GetRobotId();
  void recv_GetRobotId(std::string& _return);
  void ExecuteCommand(const  ::robot_control_system::CommandRequest& request);
  void send_ExecuteCommand(const  ::robot_control_system::CommandRequest& request);
  void recv_ExecuteCommand();
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class RobotControlServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<RobotControlServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (RobotControlServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_GetRobotId(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_ExecuteCommand(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  RobotControlServiceProcessor(boost::shared_ptr<RobotControlServiceIf> iface) :
    iface_(iface) {
    processMap_["GetRobotId"] = &RobotControlServiceProcessor::process_GetRobotId;
    processMap_["ExecuteCommand"] = &RobotControlServiceProcessor::process_ExecuteCommand;
  }

  virtual ~RobotControlServiceProcessor() {}
};

class RobotControlServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  RobotControlServiceProcessorFactory(const ::boost::shared_ptr< RobotControlServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< RobotControlServiceIfFactory > handlerFactory_;
};

class RobotControlServiceMultiface : virtual public RobotControlServiceIf {
 public:
  RobotControlServiceMultiface(std::vector<boost::shared_ptr<RobotControlServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~RobotControlServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<RobotControlServiceIf> > ifaces_;
  RobotControlServiceMultiface() {}
  void add(boost::shared_ptr<RobotControlServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void GetRobotId(std::string& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetRobotId(_return);
    }
    ifaces_[i]->GetRobotId(_return);
    return;
  }

  void ExecuteCommand(const  ::robot_control_system::CommandRequest& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ExecuteCommand(request);
    }
    ifaces_[i]->ExecuteCommand(request);
  }

};

} // namespace

#endif
