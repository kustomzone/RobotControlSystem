/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef UserService_H
#define UserService_H

#include <thrift/TDispatchProcessor.h>
#include "user_service_types.h"

namespace robot_control_system {

class UserServiceIf {
 public:
  virtual ~UserServiceIf() {}
  virtual void SendCommand(CommandResponse& _return, const CommandRequest& request) = 0;
};

class UserServiceIfFactory {
 public:
  typedef UserServiceIf Handler;

  virtual ~UserServiceIfFactory() {}

  virtual UserServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(UserServiceIf* /* handler */) = 0;
};

class UserServiceIfSingletonFactory : virtual public UserServiceIfFactory {
 public:
  UserServiceIfSingletonFactory(const boost::shared_ptr<UserServiceIf>& iface) : iface_(iface) {}
  virtual ~UserServiceIfSingletonFactory() {}

  virtual UserServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(UserServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<UserServiceIf> iface_;
};

class UserServiceNull : virtual public UserServiceIf {
 public:
  virtual ~UserServiceNull() {}
  void SendCommand(CommandResponse& /* _return */, const CommandRequest& /* request */) {
    return;
  }
};

typedef struct _UserService_SendCommand_args__isset {
  _UserService_SendCommand_args__isset() : request(false) {}
  bool request;
} _UserService_SendCommand_args__isset;

class UserService_SendCommand_args {
 public:

  UserService_SendCommand_args() {
  }

  virtual ~UserService_SendCommand_args() throw() {}

  CommandRequest request;

  _UserService_SendCommand_args__isset __isset;

  void __set_request(const CommandRequest& val) {
    request = val;
  }

  bool operator == (const UserService_SendCommand_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const UserService_SendCommand_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UserService_SendCommand_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class UserService_SendCommand_pargs {
 public:


  virtual ~UserService_SendCommand_pargs() throw() {}

  const CommandRequest* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _UserService_SendCommand_result__isset {
  _UserService_SendCommand_result__isset() : success(false) {}
  bool success;
} _UserService_SendCommand_result__isset;

class UserService_SendCommand_result {
 public:

  UserService_SendCommand_result() {
  }

  virtual ~UserService_SendCommand_result() throw() {}

  CommandResponse success;

  _UserService_SendCommand_result__isset __isset;

  void __set_success(const CommandResponse& val) {
    success = val;
  }

  bool operator == (const UserService_SendCommand_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const UserService_SendCommand_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const UserService_SendCommand_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _UserService_SendCommand_presult__isset {
  _UserService_SendCommand_presult__isset() : success(false) {}
  bool success;
} _UserService_SendCommand_presult__isset;

class UserService_SendCommand_presult {
 public:


  virtual ~UserService_SendCommand_presult() throw() {}

  CommandResponse* success;

  _UserService_SendCommand_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class UserServiceClient : virtual public UserServiceIf {
 public:
  UserServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  UserServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void SendCommand(CommandResponse& _return, const CommandRequest& request);
  void send_SendCommand(const CommandRequest& request);
  void recv_SendCommand(CommandResponse& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class UserServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<UserServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (UserServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_SendCommand(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  UserServiceProcessor(boost::shared_ptr<UserServiceIf> iface) :
    iface_(iface) {
    processMap_["SendCommand"] = &UserServiceProcessor::process_SendCommand;
  }

  virtual ~UserServiceProcessor() {}
};

class UserServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  UserServiceProcessorFactory(const ::boost::shared_ptr< UserServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< UserServiceIfFactory > handlerFactory_;
};

class UserServiceMultiface : virtual public UserServiceIf {
 public:
  UserServiceMultiface(std::vector<boost::shared_ptr<UserServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~UserServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<UserServiceIf> > ifaces_;
  UserServiceMultiface() {}
  void add(boost::shared_ptr<UserServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void SendCommand(CommandResponse& _return, const CommandRequest& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->SendCommand(_return, request);
    }
    ifaces_[i]->SendCommand(_return, request);
    return;
  }

};

} // namespace

#endif
