/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef RobotService_H
#define RobotService_H

#include <thrift/TDispatchProcessor.h>
#include "robot_service_types.h"

namespace robot_control_system {

class RobotServiceIf {
 public:
  virtual ~RobotServiceIf() {}
  virtual void Login(RobotServiceResponse& _return, const LoginRequest& request) = 0;
  virtual void Logout(RobotServiceResponse& _return, const LogoutRequest& request) = 0;
};

class RobotServiceIfFactory {
 public:
  typedef RobotServiceIf Handler;

  virtual ~RobotServiceIfFactory() {}

  virtual RobotServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(RobotServiceIf* /* handler */) = 0;
};

class RobotServiceIfSingletonFactory : virtual public RobotServiceIfFactory {
 public:
  RobotServiceIfSingletonFactory(const boost::shared_ptr<RobotServiceIf>& iface) : iface_(iface) {}
  virtual ~RobotServiceIfSingletonFactory() {}

  virtual RobotServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(RobotServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<RobotServiceIf> iface_;
};

class RobotServiceNull : virtual public RobotServiceIf {
 public:
  virtual ~RobotServiceNull() {}
  void Login(RobotServiceResponse& /* _return */, const LoginRequest& /* request */) {
    return;
  }
  void Logout(RobotServiceResponse& /* _return */, const LogoutRequest& /* request */) {
    return;
  }
};

typedef struct _RobotService_Login_args__isset {
  _RobotService_Login_args__isset() : request(false) {}
  bool request;
} _RobotService_Login_args__isset;

class RobotService_Login_args {
 public:

  RobotService_Login_args() {
  }

  virtual ~RobotService_Login_args() throw() {}

  LoginRequest request;

  _RobotService_Login_args__isset __isset;

  void __set_request(const LoginRequest& val) {
    request = val;
  }

  bool operator == (const RobotService_Login_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const RobotService_Login_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RobotService_Login_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RobotService_Login_pargs {
 public:


  virtual ~RobotService_Login_pargs() throw() {}

  const LoginRequest* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RobotService_Login_result__isset {
  _RobotService_Login_result__isset() : success(false) {}
  bool success;
} _RobotService_Login_result__isset;

class RobotService_Login_result {
 public:

  RobotService_Login_result() {
  }

  virtual ~RobotService_Login_result() throw() {}

  RobotServiceResponse success;

  _RobotService_Login_result__isset __isset;

  void __set_success(const RobotServiceResponse& val) {
    success = val;
  }

  bool operator == (const RobotService_Login_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RobotService_Login_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RobotService_Login_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RobotService_Login_presult__isset {
  _RobotService_Login_presult__isset() : success(false) {}
  bool success;
} _RobotService_Login_presult__isset;

class RobotService_Login_presult {
 public:


  virtual ~RobotService_Login_presult() throw() {}

  RobotServiceResponse* success;

  _RobotService_Login_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

typedef struct _RobotService_Logout_args__isset {
  _RobotService_Logout_args__isset() : request(false) {}
  bool request;
} _RobotService_Logout_args__isset;

class RobotService_Logout_args {
 public:

  RobotService_Logout_args() {
  }

  virtual ~RobotService_Logout_args() throw() {}

  LogoutRequest request;

  _RobotService_Logout_args__isset __isset;

  void __set_request(const LogoutRequest& val) {
    request = val;
  }

  bool operator == (const RobotService_Logout_args & rhs) const
  {
    if (!(request == rhs.request))
      return false;
    return true;
  }
  bool operator != (const RobotService_Logout_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RobotService_Logout_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class RobotService_Logout_pargs {
 public:


  virtual ~RobotService_Logout_pargs() throw() {}

  const LogoutRequest* request;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RobotService_Logout_result__isset {
  _RobotService_Logout_result__isset() : success(false) {}
  bool success;
} _RobotService_Logout_result__isset;

class RobotService_Logout_result {
 public:

  RobotService_Logout_result() {
  }

  virtual ~RobotService_Logout_result() throw() {}

  RobotServiceResponse success;

  _RobotService_Logout_result__isset __isset;

  void __set_success(const RobotServiceResponse& val) {
    success = val;
  }

  bool operator == (const RobotService_Logout_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const RobotService_Logout_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const RobotService_Logout_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _RobotService_Logout_presult__isset {
  _RobotService_Logout_presult__isset() : success(false) {}
  bool success;
} _RobotService_Logout_presult__isset;

class RobotService_Logout_presult {
 public:


  virtual ~RobotService_Logout_presult() throw() {}

  RobotServiceResponse* success;

  _RobotService_Logout_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};

class RobotServiceClient : virtual public RobotServiceIf {
 public:
  RobotServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) :
    piprot_(prot),
    poprot_(prot) {
    iprot_ = prot.get();
    oprot_ = prot.get();
  }
  RobotServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) :
    piprot_(iprot),
    poprot_(oprot) {
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void Login(RobotServiceResponse& _return, const LoginRequest& request);
  void send_Login(const LoginRequest& request);
  void recv_Login(RobotServiceResponse& _return);
  void Logout(RobotServiceResponse& _return, const LogoutRequest& request);
  void send_Logout(const LogoutRequest& request);
  void recv_Logout(RobotServiceResponse& _return);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class RobotServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<RobotServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (RobotServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_Login(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Logout(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  RobotServiceProcessor(boost::shared_ptr<RobotServiceIf> iface) :
    iface_(iface) {
    processMap_["Login"] = &RobotServiceProcessor::process_Login;
    processMap_["Logout"] = &RobotServiceProcessor::process_Logout;
  }

  virtual ~RobotServiceProcessor() {}
};

class RobotServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  RobotServiceProcessorFactory(const ::boost::shared_ptr< RobotServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< RobotServiceIfFactory > handlerFactory_;
};

class RobotServiceMultiface : virtual public RobotServiceIf {
 public:
  RobotServiceMultiface(std::vector<boost::shared_ptr<RobotServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~RobotServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<RobotServiceIf> > ifaces_;
  RobotServiceMultiface() {}
  void add(boost::shared_ptr<RobotServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void Login(RobotServiceResponse& _return, const LoginRequest& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Login(_return, request);
    }
    ifaces_[i]->Login(_return, request);
    return;
  }

  void Logout(RobotServiceResponse& _return, const LogoutRequest& request) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Logout(_return, request);
    }
    ifaces_[i]->Logout(_return, request);
    return;
  }

};

} // namespace

#endif
