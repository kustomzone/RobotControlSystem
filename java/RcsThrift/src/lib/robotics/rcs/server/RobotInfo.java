/**
 * Autogenerated by Thrift Compiler (0.9.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package lib.robotics.rcs.server;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

public class RobotInfo implements org.apache.thrift.TBase<RobotInfo, RobotInfo._Fields>, java.io.Serializable, Cloneable {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("RobotInfo");

  private static final org.apache.thrift.protocol.TField ROBOT_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("robot_id", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField ROBOT_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("robot_name", org.apache.thrift.protocol.TType.STRING, (short)2);
  private static final org.apache.thrift.protocol.TField ROBOT_STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("robot_status", org.apache.thrift.protocol.TType.I32, (short)3);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new RobotInfoStandardSchemeFactory());
    schemes.put(TupleScheme.class, new RobotInfoTupleSchemeFactory());
  }

  private String robot_id; // required
  private String robot_name; // required
  private RobotStatus robot_status; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    ROBOT_ID((short)1, "robot_id"),
    ROBOT_NAME((short)2, "robot_name"),
    /**
     * 
     * @see RobotStatus
     */
    ROBOT_STATUS((short)3, "robot_status");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // ROBOT_ID
          return ROBOT_ID;
        case 2: // ROBOT_NAME
          return ROBOT_NAME;
        case 3: // ROBOT_STATUS
          return ROBOT_STATUS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.ROBOT_ID, new org.apache.thrift.meta_data.FieldMetaData("robot_id", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ROBOT_NAME, new org.apache.thrift.meta_data.FieldMetaData("robot_name", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.ROBOT_STATUS, new org.apache.thrift.meta_data.FieldMetaData("robot_status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, RobotStatus.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(RobotInfo.class, metaDataMap);
  }

  public RobotInfo() {
  }

  public RobotInfo(
    String robot_id,
    String robot_name,
    RobotStatus robot_status)
  {
    this();
    this.robot_id = robot_id;
    this.robot_name = robot_name;
    this.robot_status = robot_status;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public RobotInfo(RobotInfo other) {
    if (other.isSetRobot_id()) {
      this.robot_id = other.robot_id;
    }
    if (other.isSetRobot_name()) {
      this.robot_name = other.robot_name;
    }
    if (other.isSetRobot_status()) {
      this.robot_status = other.robot_status;
    }
  }

  public RobotInfo deepCopy() {
    return new RobotInfo(this);
  }

  @Override
  public void clear() {
    this.robot_id = null;
    this.robot_name = null;
    this.robot_status = null;
  }

  public String getRobot_id() {
    return this.robot_id;
  }

  public void setRobot_id(String robot_id) {
    this.robot_id = robot_id;
  }

  public void unsetRobot_id() {
    this.robot_id = null;
  }

  /** Returns true if field robot_id is set (has been assigned a value) and false otherwise */
  public boolean isSetRobot_id() {
    return this.robot_id != null;
  }

  public void setRobot_idIsSet(boolean value) {
    if (!value) {
      this.robot_id = null;
    }
  }

  public String getRobot_name() {
    return this.robot_name;
  }

  public void setRobot_name(String robot_name) {
    this.robot_name = robot_name;
  }

  public void unsetRobot_name() {
    this.robot_name = null;
  }

  /** Returns true if field robot_name is set (has been assigned a value) and false otherwise */
  public boolean isSetRobot_name() {
    return this.robot_name != null;
  }

  public void setRobot_nameIsSet(boolean value) {
    if (!value) {
      this.robot_name = null;
    }
  }

  /**
   * 
   * @see RobotStatus
   */
  public RobotStatus getRobot_status() {
    return this.robot_status;
  }

  /**
   * 
   * @see RobotStatus
   */
  public void setRobot_status(RobotStatus robot_status) {
    this.robot_status = robot_status;
  }

  public void unsetRobot_status() {
    this.robot_status = null;
  }

  /** Returns true if field robot_status is set (has been assigned a value) and false otherwise */
  public boolean isSetRobot_status() {
    return this.robot_status != null;
  }

  public void setRobot_statusIsSet(boolean value) {
    if (!value) {
      this.robot_status = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case ROBOT_ID:
      if (value == null) {
        unsetRobot_id();
      } else {
        setRobot_id((String)value);
      }
      break;

    case ROBOT_NAME:
      if (value == null) {
        unsetRobot_name();
      } else {
        setRobot_name((String)value);
      }
      break;

    case ROBOT_STATUS:
      if (value == null) {
        unsetRobot_status();
      } else {
        setRobot_status((RobotStatus)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case ROBOT_ID:
      return getRobot_id();

    case ROBOT_NAME:
      return getRobot_name();

    case ROBOT_STATUS:
      return getRobot_status();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case ROBOT_ID:
      return isSetRobot_id();
    case ROBOT_NAME:
      return isSetRobot_name();
    case ROBOT_STATUS:
      return isSetRobot_status();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof RobotInfo)
      return this.equals((RobotInfo)that);
    return false;
  }

  public boolean equals(RobotInfo that) {
    if (that == null)
      return false;

    boolean this_present_robot_id = true && this.isSetRobot_id();
    boolean that_present_robot_id = true && that.isSetRobot_id();
    if (this_present_robot_id || that_present_robot_id) {
      if (!(this_present_robot_id && that_present_robot_id))
        return false;
      if (!this.robot_id.equals(that.robot_id))
        return false;
    }

    boolean this_present_robot_name = true && this.isSetRobot_name();
    boolean that_present_robot_name = true && that.isSetRobot_name();
    if (this_present_robot_name || that_present_robot_name) {
      if (!(this_present_robot_name && that_present_robot_name))
        return false;
      if (!this.robot_name.equals(that.robot_name))
        return false;
    }

    boolean this_present_robot_status = true && this.isSetRobot_status();
    boolean that_present_robot_status = true && that.isSetRobot_status();
    if (this_present_robot_status || that_present_robot_status) {
      if (!(this_present_robot_status && that_present_robot_status))
        return false;
      if (!this.robot_status.equals(that.robot_status))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    return 0;
  }

  public int compareTo(RobotInfo other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;
    RobotInfo typedOther = (RobotInfo)other;

    lastComparison = Boolean.valueOf(isSetRobot_id()).compareTo(typedOther.isSetRobot_id());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRobot_id()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.robot_id, typedOther.robot_id);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRobot_name()).compareTo(typedOther.isSetRobot_name());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRobot_name()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.robot_name, typedOther.robot_name);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetRobot_status()).compareTo(typedOther.isSetRobot_status());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetRobot_status()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.robot_status, typedOther.robot_status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("RobotInfo(");
    boolean first = true;

    sb.append("robot_id:");
    if (this.robot_id == null) {
      sb.append("null");
    } else {
      sb.append(this.robot_id);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("robot_name:");
    if (this.robot_name == null) {
      sb.append("null");
    } else {
      sb.append(this.robot_name);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("robot_status:");
    if (this.robot_status == null) {
      sb.append("null");
    } else {
      sb.append(this.robot_status);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class RobotInfoStandardSchemeFactory implements SchemeFactory {
    public RobotInfoStandardScheme getScheme() {
      return new RobotInfoStandardScheme();
    }
  }

  private static class RobotInfoStandardScheme extends StandardScheme<RobotInfo> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, RobotInfo struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // ROBOT_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.robot_id = iprot.readString();
              struct.setRobot_idIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // ROBOT_NAME
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.robot_name = iprot.readString();
              struct.setRobot_nameIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // ROBOT_STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.robot_status = RobotStatus.findByValue(iprot.readI32());
              struct.setRobot_statusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, RobotInfo struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.robot_id != null) {
        oprot.writeFieldBegin(ROBOT_ID_FIELD_DESC);
        oprot.writeString(struct.robot_id);
        oprot.writeFieldEnd();
      }
      if (struct.robot_name != null) {
        oprot.writeFieldBegin(ROBOT_NAME_FIELD_DESC);
        oprot.writeString(struct.robot_name);
        oprot.writeFieldEnd();
      }
      if (struct.robot_status != null) {
        oprot.writeFieldBegin(ROBOT_STATUS_FIELD_DESC);
        oprot.writeI32(struct.robot_status.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class RobotInfoTupleSchemeFactory implements SchemeFactory {
    public RobotInfoTupleScheme getScheme() {
      return new RobotInfoTupleScheme();
    }
  }

  private static class RobotInfoTupleScheme extends TupleScheme<RobotInfo> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, RobotInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetRobot_id()) {
        optionals.set(0);
      }
      if (struct.isSetRobot_name()) {
        optionals.set(1);
      }
      if (struct.isSetRobot_status()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetRobot_id()) {
        oprot.writeString(struct.robot_id);
      }
      if (struct.isSetRobot_name()) {
        oprot.writeString(struct.robot_name);
      }
      if (struct.isSetRobot_status()) {
        oprot.writeI32(struct.robot_status.getValue());
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, RobotInfo struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.robot_id = iprot.readString();
        struct.setRobot_idIsSet(true);
      }
      if (incoming.get(1)) {
        struct.robot_name = iprot.readString();
        struct.setRobot_nameIsSet(true);
      }
      if (incoming.get(2)) {
        struct.robot_status = RobotStatus.findByValue(iprot.readI32());
        struct.setRobot_statusIsSet(true);
      }
    }
  }

}

